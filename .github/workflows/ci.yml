name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock openpyxl
        
    - name: Create test Excel file
      run: |
        python -c "
        import pandas as pd
        df = pd.DataFrame({'SKU': ['TEST001', 'TEST002', 'TEST003']})
        df.to_excel('test-skus.xlsx', index=False)
        "
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=s3_sku_sync --cov-report=xml --cov-report=term-missing
        
    - name: Test CLI functionality (dry run)
      run: |
        python s3_sku_sync.py --bucket test-bucket --excel test-skus.xlsx --local ./test-downloads --dry-run
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: Run bandit security linter
      run: |
        bandit -r s3_sku_sync/ -f json -o bandit-report.json
        bandit -r s3_sku_sync/ || echo "Bandit found security issues"
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || echo "Safety found vulnerabilities"
        safety check || echo "Safety found vulnerabilities"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json